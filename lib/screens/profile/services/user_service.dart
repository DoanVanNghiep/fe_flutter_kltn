import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

import '../../../url.dart';

class UserService {
  static const String _baseUrl = "${AppConfig.baseUrl}";

  // ‚úÖ H√†m l·∫•y th√¥ng tin user theo ID, c√≥ x√°c th·ª±c token
  Future<Map<String, dynamic>?> getUserById(int id) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString("token");

      if (token == null) {
        print("‚ö†Ô∏è Kh√¥ng c√≥ token, c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i!");
        return null;
      }

      final response = await http.get(
        Uri.parse("$_baseUrl/user/$id"),
        headers: {
          "Authorization": "Bearer $token",
          "Content-Type": "application/json",
        },
      );

      print("üì° G·ªçi API /user/$id ‚Äì Status: ${response.statusCode}");

      if (response.statusCode == 200) {
        final Map<String, dynamic> data =
        jsonDecode(utf8.decode(response.bodyBytes));

        print("üìå D·ªØ li·ªáu ng∆∞·ªùi d√πng:");
        print(jsonEncode(data));

        return data;
      } else if (response.statusCode == 401) {
        print("‚ùå Token kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë·ªß quy·ªÅn!");
        return null;
      } else {
        throw Exception("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: ${response.statusCode}");
      }
    } catch (e) {
      print("‚ùå L·ªói k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu: $e");
      return null;
    }
  }

  Future<String?> getUserAvatar(int id) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString("token");

      if (token == null) {
        print("‚ö†Ô∏è Token kh√¥ng t·ªìn t·∫°i. C·∫ßn ƒëƒÉng nh·∫≠p.");
        return null;
      }

      final response = await http.get(
        Uri.parse("$_baseUrl/user/$id/avatar"),
        headers: {
          "Authorization": "Bearer $token",
          "Content-Type": "application/json",
        },
      );

      print("üì° G·ªçi GET /user/$id/avatar ‚Äì Status: ${response.statusCode}");

      if (response.statusCode == 200) {
        final Map<String, dynamic> jsonData =
        jsonDecode(utf8.decode(response.bodyBytes));

        final base64Image = jsonData['data'];

        return base64Image;
      } else if (response.statusCode == 401) {
        print("‚ùå Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n!");
        return null;
      } else {
        throw Exception("L·ªói API avatar: ${response.statusCode}");
      }
    } catch (e) {
      print("‚ùå L·ªói khi g·ªçi API avatar: $e");
      return null;
    }
  }

  Future<bool> updateUser({
    required int id,
    required String fullName,
    required String email,
    required String phone,
    required String address,
  }) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString("token");

      if (token == null) {
        throw Exception("Token kh√¥ng t·ªìn t·∫°i, c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i");
      }

      final Map<String, dynamic> requestBody = {
        "id": id,
        "fullName": fullName,
        "email": email,
        "phone": phone,
        "address": address,
      };

      final response = await http.put(
        Uri.parse("$_baseUrl"),
        headers: {
          "Authorization": "Bearer $token",
          "Content-Type": "application/json",
        },
        body: jsonEncode(requestBody),
      );

      if (response.statusCode == 200) {
        print("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng: ${response.body}");
        return true;
      } else {
        print("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i: ${response.statusCode} - ${response.body}");
        return false;
      }
    } catch (e) {
      print("‚ùå L·ªói khi g·ªçi API updateUser: $e");
      return false;
    }
  }
}
